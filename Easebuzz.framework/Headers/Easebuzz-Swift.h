// Generated by Apple Swift version 4.2.1 effective-3.4.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import Security;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Easebuzz",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif




@interface NSMutableURLRequest (SWIFT_EXTENSION(Easebuzz))
- (void)setBodyContentWithParameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
@end



@protocol PayWithEasebuzzCallback;
@class Payment;

SWIFT_CLASS("_TtC8Easebuzz15PayWithEasebuzz")
@interface PayWithEasebuzz : NSObject
/// Initizalise App
+ (void)setUpWithPebCallback:(id <PayWithEasebuzzCallback> _Nonnull)pebCallback;
+ (BOOL)initiliazed SWIFT_WARN_UNUSED_RESULT;
/// Invoke Pre Created Payment UI
/// @param paymentObject Payment
+ (void)invokePaymentOptionsViewWithPaymentObj:(Payment * _Nonnull)paymentObj isFrom:(id _Nonnull)isFrom;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP8Easebuzz23PayWithEasebuzzCallback_")
@protocol PayWithEasebuzzCallback <NSObject>
- (void)PEBCallbackWithData:(NSDictionary<NSString *, id> * _Nonnull)data;
@end

@class NSDictionary;

SWIFT_CLASS("_TtC8Easebuzz7Payment")
@interface Payment : NSObject
- (nonnull instancetype)initWithCustomerData:(NSDictionary<NSString *, NSString *> * _Nonnull)customerData OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nonnull)isValidTxnId SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nonnull)isValidAmount SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nonnull)isValidName SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nonnull)isValidPhone SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nonnull)isValidProductInfo SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nonnull)isValidEmail SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8Easebuzz8RSAUtils")
@interface RSAUtils : NSObject
+ (NSData * _Nullable)encryptWithRSAKey:(NSData * _Nonnull)data rsaKeyRef:(SecKeyRef _Nonnull)rsaKeyRef padding:(SecPadding)padding SWIFT_WARN_UNUSED_RESULT;
+ (NSData * _Nullable)decryptWithRSAKey:(NSData * _Nonnull)encryptedData rsaKeyRef:(SecKeyRef _Nonnull)rsaKeyRef padding:(SecPadding)padding SWIFT_WARN_UNUSED_RESULT;
+ (void)deleteRSAKeyFromKeychain:(NSString * _Nonnull)tagName;
+ (SecKeyRef _Nullable)getRSAKeyFromKeychain:(NSString * _Nonnull)tagName SWIFT_WARN_UNUSED_RESULT;
+ (SecKeyRef _Nullable)addRSAPrivateKey:(NSString * _Nonnull)privkeyBase64 tagName:(NSString * _Nonnull)tagName SWIFT_WARN_UNUSED_RESULT;
+ (SecKeyRef _Nullable)addRSAPublicKey:(NSString * _Nonnull)pubkeyBase64 tagName:(NSString * _Nonnull)tagName SWIFT_WARN_UNUSED_RESULT;
+ (NSData * _Nullable)encryptWithRSAPrivateKey:(NSData * _Nonnull)data privkeyBase64:(NSString * _Nonnull)privkeyBase64 keychainTag:(NSString * _Nonnull)keychainTag SWIFT_WARN_UNUSED_RESULT;
+ (NSData * _Nullable)encryptWithRSAPublicKey:(NSData * _Nonnull)data pubkeyBase64:(NSString * _Nonnull)pubkeyBase64 keychainTag:(NSString * _Nonnull)keychainTag SWIFT_WARN_UNUSED_RESULT;
+ (NSData * _Nullable)decryptWithRSAPrivateKey:(NSData * _Nonnull)encryptedData privkeyBase64:(NSString * _Nonnull)privkeyBase64 keychainTag:(NSString * _Nonnull)keychainTag SWIFT_WARN_UNUSED_RESULT;
+ (NSData * _Nullable)decryptWithRSAPublicKey:(NSData * _Nonnull)encryptedData pubkeyBase64:(NSString * _Nonnull)pubkeyBase64 keychainTag:(NSString * _Nonnull)keychainTag SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;
@class UIVisualEffect;

SWIFT_CLASS("_TtC8Easebuzz7Spinner")
@interface Spinner : UIVisualEffectView
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
- (void)setTextWithText:(NSString * _Nonnull)text;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToSuperview;
- (void)show;
- (void)hide;
- (nonnull instancetype)initWithEffect:(UIVisualEffect * _Nullable)effect SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8Easebuzz15StaticDataModel")
@interface StaticDataModel : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_SUCCESS_CODE;)
+ (NSString * _Nonnull)TXN_SUCCESS_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_FAILED_CODE;)
+ (NSString * _Nonnull)TXN_FAILED_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_TIMEOUT_CODE;)
+ (NSString * _Nonnull)TXN_TIMEOUT_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_BACKPRESSED_CODE;)
+ (NSString * _Nonnull)TXN_BACKPRESSED_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_USERCANCELLED_CODE;)
+ (NSString * _Nonnull)TXN_USERCANCELLED_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_USER_FAILED_CODE;)
+ (NSString * _Nonnull)TXN_USER_FAILED_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_ERROR_SERVER_ERROR_CODE;)
+ (NSString * _Nonnull)TXN_ERROR_SERVER_ERROR_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_ERROR_NO_RETRY_CODE;)
+ (NSString * _Nonnull)TXN_ERROR_NO_RETRY_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_ERROR_TXN_NOT_ALLOWED_CODE;)
+ (NSString * _Nonnull)TXN_ERROR_TXN_NOT_ALLOWED_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_INVALID_INPUT_DATA_CODE;)
+ (NSString * _Nonnull)TXN_INVALID_INPUT_DATA_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_ERROR_RETRY_FAILED_CODE;)
+ (NSString * _Nonnull)TXN_ERROR_RETRY_FAILED_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_SESSION_STARTED_CODE;)
+ (NSString * _Nonnull)TXN_SESSION_STARTED_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_SESSION_EXPIRED_CODE;)
+ (NSString * _Nonnull)TXN_SESSION_EXPIRED_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_SESSION_CANCELLED_CODE_TRUE;)
+ (NSString * _Nonnull)TXN_SESSION_CANCELLED_CODE_TRUE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_SESSION_CANCELLED_CODE_FALSE;)
+ (NSString * _Nonnull)TXN_SESSION_CANCELLED_CODE_FALSE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_BANK_BACK_PRESSED_CODE;)
+ (NSString * _Nonnull)TXN_BANK_BACK_PRESSED_CODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TXN_UPI_CANCELLED_CODE;)
+ (NSString * _Nonnull)TXN_UPI_CANCELLED_CODE SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






@interface UINavigationController (SWIFT_EXTENSION(Easebuzz))
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@end








@interface UIView (SWIFT_EXTENSION(Easebuzz))
/// Displays any view as toast at a provided center point and duration. The completion closure
/// executes when the toast view completes. <code>didTap</code> will be <code>true</code> if the toast view was
/// dismissed from a tap.
/// @param toast The view to be displayed as toast
/// @param duration The notification duration
/// @param point The toast’s center point
/// @param completion The completion block, executed after the toast view disappears.
/// didTap will be <code>true</code> if the toast view was dismissed from a tap.
- (void)showToast:(UIView * _Nonnull)toast duration:(NSTimeInterval)duration point:(CGPoint)point completion:(void (^ _Nullable)(BOOL))completion;
/// Hides the active toast. If there are multiple toasts active in a view, this method
/// hides the oldest toast (the first of the toasts to have been presented).
/// @see <code>hideAllToasts()</code> to remove all active toasts from a view.
/// @warning This method has no effect on activity toasts. Use <code>hideToastActivity</code> to
/// hide activity toasts.
- (void)hideToast;
/// Hides an active toast.
/// @param toast The active toast view to dismiss. Any toast that is currently being displayed
/// on the screen is considered active.
/// @warning this does not clear a toast view that is currently waiting in the queue.
- (void)hideToast:(UIView * _Nonnull)toast;
/// Hides all toast views.
/// @param includeActivity If <code>true</code>, toast activity will also be hidden. Default is <code>false</code>.
/// @param clearQueue If <code>true</code>, removes all toast views from the queue. Default is <code>true</code>.
- (void)hideAllToastsWithIncludeActivity:(BOOL)includeActivity clearQueue:(BOOL)clearQueue;
/// Removes all toast views from the queue. This has no effect on toast views that are
/// active. Use <code>hideAllToasts(clearQueue:)</code> to hide the active toasts views and clear
/// the queue.
- (void)clearToastQueue;
/// Creates and displays a new toast activity indicator view at a specified position.
/// @warning Only one toast activity indicator view can be presented per superview. Subsequent
/// calls to <code>makeToastActivity(position:)</code> will be ignored until <code>hideToastActivity()</code> is called.
/// @warning <code>makeToastActivity(position:)</code> works independently of the <code>showToast</code> methods. Toast
/// activity views can be presented and dismissed while toast views are being displayed.
/// <code>makeToastActivity(position:)</code> has no effect on the queueing behavior of the <code>showToast</code> methods.
/// @param point The toast’s center point
- (void)makeToastActivity:(CGPoint)point;
/// Dismisses the active toast activity indicator view.
- (void)hideToastActivity;
@end

@class UITouch;
@class UIEvent;

@interface UIViewController (SWIFT_EXTENSION(Easebuzz))
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
